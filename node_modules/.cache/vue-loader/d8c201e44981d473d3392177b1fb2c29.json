{"remainingRequest":"/Users/matiascaballero/matidev/abg/abg-custom-element-product-selector/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/matiascaballero/matidev/abg/abg-custom-element-product-selector/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/matiascaballero/matidev/abg/abg-custom-element-product-selector/src/App.vue","mtime":1623329223078},{"path":"/Users/matiascaballero/matidev/abg/abg-custom-element-product-selector/node_modules/css-loader/dist/cjs.js","mtime":1623402545784},{"path":"/Users/matiascaballero/matidev/abg/abg-custom-element-product-selector/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1623402546143},{"path":"/Users/matiascaballero/matidev/abg/abg-custom-element-product-selector/node_modules/postcss-loader/src/index.js","mtime":1623402546065},{"path":"/Users/matiascaballero/matidev/abg/abg-custom-element-product-selector/node_modules/cache-loader/dist/cjs.js","mtime":1623402537694},{"path":"/Users/matiascaballero/matidev/abg/abg-custom-element-product-selector/node_modules/vue-loader/lib/index.js","mtime":1623402546143}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpodG1sIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KI2FwcCB7CiAgcGFkZGluZy10b3A6IDAuNWVtOwp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <Callout v-if=\"errorMessage\" type=\"error\" title=\"Something went wrong\">\n      <p>\n        {{ errorMessage }}\n      </p>\n    </Callout>\n    <div v-if=\"loaded\">\n      <ContentTypeSelector\n        :element=\"element\"\n        :context=\"context\"\n        :value.sync=\"value\"\n      />\n      <Debug\n        :element=\"element\"\n        :context=\"context\"\n        :value=\"value\"\n        @handleDisable=\"handleDisable\"\n      />\n      <resize-observer @notify=\"updateSize\" />\n    </div>\n  </div>\n</template>\n\n<script>\n/*global CustomElement*/\nimport Callout from \"./components/Callout\";\nimport Debug from \"./components/Debug\";\nimport ContentTypeSelector from \"./components/ContentTypeSelector\";\nimport Vue from \"vue\";\nimport { GlobalEventBus } from \"./globalEventBus\";\n\nexport default {\n  name: \"app\",\n  components: {\n    Callout,\n    Debug,\n    ContentTypeSelector\n  },\n  data: () => ({\n    loaded: false,\n    errorMessage: \"\",\n    element: {},\n    context: {},\n    value: null\n  }),\n  created: function() {\n    try {\n      CustomElement.init(this.initialize);\n\n      CustomElement.onDisabledChanged(this.handleDisable);\n      CustomElement.observeElementChanges([], elementCodename => {\n        GlobalEventBus.$emit(\"onElementChanged\", elementCodename[0]);\n      });\n    } catch (error) {\n      this.errorMessage = error;\n    }\n  },\n  methods: {\n    getElementValue: function(elementCodename) {\n      return new Promise((resolve, reject) => {\n        try {\n          CustomElement.getElementValue(elementCodename, value => {\n            resolve(value);\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    },\n    handleDisable: function(disableState) {\n      this.element.disabled = disableState;\n    },\n    initialize: function(element, context) {\n      this.element = element;\n      this.context = context;\n      this.value = this.element.value ? JSON.parse(this.element.value) : null;\n      this.loaded = true;\n      this.updateSize();\n    },\n    save: function(value) {\n      // Explicitly using == to match both null and undefined\n      const toSave = value == null ? null : JSON.stringify(value);\n      this.element.value = toSave;\n      CustomElement.setValue(toSave);\n    },\n    updateSize() {\n      Vue.nextTick(function() {\n        const height = Math.max(\n          document.body.scrollHeight,\n          document.body.offsetHeight,\n          document.documentElement.offsetHeight\n        );\n\n        CustomElement.setHeight(height);\n      });\n    }\n  },\n  watch: {\n    value: function(newValue) {\n      this.save(newValue);\n    }\n  }\n};\n</script>\n\n<style>\nhtml {\n  position: relative;\n}\n#app {\n  padding-top: 0.5em;\n}\n</style>\n"]}]}